validate(x) {
  while (x <= 0) {
    println x," invalid";
    read x;
  }
  return x;
} 
expon(x) {
  var eps, k, t, s;
  eps = 0.000001;
  k = 0; t = 1; s = 1;
  while (abs(t/s) > eps)   {
    k = k+1; t = x*t/k; s = s+t;
    //println k,t:15,"  ",s;
  }
  return s; 
}
compExp() {
  var x; println "Exponential"; read x;
  print "expon = ", expon(x);
  println "  exp = ", exp(x);
}
root(x) {
  var r, dif, eps;
  r = 1; dif = 1; eps = 0.000001;
  while (dif > eps) {
    r = (r+x/r)/2;
    dif = abs(r*r/x-1);
    println r:24, dif:24;
  }
  return r;
}
compSqrt() {
  var x, r; 
  println "Square root";
  read "number", x; 
  x = validate(x); r = root(x);
  print "root = ", r;
  println "  sqrt = ", sqrt(x);
}
power(a, n) {
  if (n == 0) {
      return 1;
  } else if (n < 0) { //-n is allowed
      return power(1/a, -n);
  } else if (round(n/2) == n/2) {
      return power(a*a, n/2); //even n
  } else {
      return a*power(a, n-1); //odd n
  }
}
compPower() {
  var x, n;
  read x; 
  read n;
  while (round(n) != n) {
    println n," invalid";
    read n;
  } 
  print "Power  ";
  print x, "^", n;
  print power(x,n):10;
  println exp(n*log(x)):24;
}
gcd(m,n) {
  while (m != n) {
    if (m < n) { // use the larger
      n = n - m;
    } else {
      m = m - n;
    }
  }
  return m;
}
testGCD() {
  var x,y;
  println "Greatest Common Divisor";
  read x; x = validate(x);
  read y; y = validate(y);
  println x:5,y:5," => ", gcd(x,y);
}
fibon(M) {
  var f, f0, f1, k;
  println "Fibonacci -- non-recursive";
  f0 = 0; f1 = 1; k = 2;
  while (k <= M)   {
    f = f0 + f1;
    println k:3, f:10;
    f0 = f1; f1 = f; k = k+1;
  }
}
harmon(M, k, max) {
   var t, x, y;
   println "Simple Harmonic Motion";
//   M = 30; k = 0.06; max = 1000;  
   t = 0; x = 0; y = M;  
   while (t < max) {    
      println t:4," ", 0:y+M+1;    
      t = t + 1;    
      x = x- k*y;    
      y = y + x;  
   }
}
prompt(c) {
  println;
  println "1. Expon   2. Sqrt    3. Fibonacci";
  println "4. GCD     5. Power   6. Harmonic";
  read "Your choice", c;
  return c;
}
long(n) {
  n = prompt(6);
  while (n > 0) {
    if (n == 1) { compExp(); }
    else if (n == 2) { compSqrt(); }
    else if (n == 3) { fibon(20); }
    else if (n == 4) { testGCD(); }
    else if (n == 5) { compPower(); }
    else if (n == 6) { harmon(30, 0.06, 100); }
    n = prompt(n);
  }
  println "End of long mJ program";
}

